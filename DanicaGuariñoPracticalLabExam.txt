#include <iostream>
using namespace std;

struct Node {

        int data;
        Node* next;
        
};

class SinglyLinkedList {
private:
    Node* head;


public:
         SinglyLinkedList() : head(nullptr) {}
         
    
    void insert(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = head;
        head = newNode;
        cout << value << " has been inserted successfully." << endl;
        } 
        
       
       void deleteNode (int value) {
            if (head == nullptr) {
                cout << "Underflow." << endl;
                return;
            }
            
            
                Node* temp = head; 
                Node* prev = nullptr; 
                
                if (temp != nullptr && temp-> data == value) {
                    
                    head = temp-> next;
                    delete temp;
                    cout << value << " is being deleted" << endl;
                return;
            
            }
            
            while (temp != nullptr && temp ->next->data != value) {
    
                prev = temp; 
                temp = temp->next;
            }
            
            if (temp == nullptr) {
                cout << value << " not found in the list." << endl;
                    return;
            }
            
            prev->next = temp->next;
            delete temp;
            cout << value << " is being deleted" << endl;
            }
            
            void display() {
                Node* temp = head;
                while (temp != nullptr) {
                    cout << temp->data << " ";
                    temp = temp->next;
                
                }
                cout<< endl;
       }
};

int main() {
    SinglyLinkedList list;
    
    
    list.insert(10);
    list.insert(24);
    list.insert(28);
    list.insert(32);
    list.insert(30);
    
    list.display();
    
    list.deleteNode(10);
    list.deleteNode(28);
    list.deleteNode(32);
    list.deleteNode(30);
    
    list.display();
    
    return 0;
    
    
}
